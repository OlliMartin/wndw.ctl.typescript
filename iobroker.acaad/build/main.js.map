{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nimport \"reflect-metadata\";\r\nimport {container} from \"tsyringe\";\r\nimport { TestService } from \"./services/TestService\";\r\n\r\nclass Acaad extends utils.Adapter {\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: \"acaad\",\r\n        });\r\n        this.on(\"ready\", this.onReady.bind(this));\r\n        this.on(\"stateChange\", this.onStateChange.bind(this));\r\n        \r\n        this.on(\"unload\", this.onUnload.bind(this));\r\n    }\r\n    \r\n    private async onReady(): Promise<void> {\r\n        this.log.info(\"config option1: \" + this.config.option1);\r\n        this.log.info(\"config option2: \" + this.config.option2);\r\n\r\n        const instance = container.resolve(TestService) as TestService;\r\n        instance.LogSomething(this.log);\r\n        \r\n        /*\r\n\t\tFor every state in the system there has to be also an object of type state\r\n\t\tHere a simple template for a boolean variable named \"testVariable\"\r\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n\t\t*/\r\n        await this.setObjectNotExistsAsync(\"testVariable\", {\r\n            type: \"state\",\r\n            common: {\r\n                name: \"testVariable\",\r\n                type: \"boolean\",\r\n                role: \"indicator\",\r\n                read: true,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n        \r\n        this.subscribeStates(\"testVariable\");\r\n        await this.setStateAsync(\"testVariable\", true);\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            \r\n        }\r\n        finally {\r\n            callback(); \r\n        }\r\n    }\r\n\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n        } else {\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Acaad(options);\r\n} else {\r\n    (() => new Acaad())();\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AACvB,8BAAO;AACP,sBAAwB;AACxB,yBAA4B;AAE5B,MAAM,cAAc,MAAM,QAAQ;AAAA,EACvB,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAEA,MAAc,UAAyB;AACnC,SAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,OAAO;AACtD,SAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,OAAO;AAEtD,UAAM,WAAW,0BAAU,QAAQ,8BAAW;AAC9C,aAAS,aAAa,KAAK,GAAG;AAO9B,UAAM,KAAK,wBAAwB,gBAAgB;AAAA,MAC/C,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AAED,SAAK,gBAAgB,cAAc;AACnC,UAAM,KAAK,cAAc,gBAAgB,IAAI;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAAA,IAEJ,UACA;AACI,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AACP,WAAK,IAAI,KAAK,SAAS,EAAE,aAAa,MAAM,GAAG,WAAW,MAAM,GAAG,GAAG;AAAA,IAC1E,OAAO;AACH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AACzB,SAAO,UAAU,CAAC,YAAuD,IAAI,MAAM,OAAO;AAC9F,OAAO;AACH,GAAC,MAAM,IAAI,MAAM,GAAG;AACxB;",
  "names": []
}
